#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int burstTime;      // Burst time
    int waitingTime;    // Waiting time
    int turnaroundTime; // Turnaround time
};

// Function to calculate waiting and turnaround times
void calculateTimes(struct Process proc[], int n) {
    proc[0].waitingTime = 0; // First process waiting time is 0
    for (int i = 1; i < n; i++) {
        proc[i].waitingTime = proc[i-1].waitingTime + proc[i-1].burstTime;
    }
    for (int i = 0; i < n; i++) {
        proc[i].turnaroundTime = proc[i].burstTime + proc[i].waitingTime;
    }
}

// Function to print the results
void printResults(struct Process proc[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        totalWaitingTime += proc[i].waitingTime;
        totalTurnaroundTime += proc[i].turnaroundTime;
        printf("%d\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burstTime, proc[i].waitingTime, proc[i].turnaroundTime);
    }
    printf("Average Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];
    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &proc[i].burstTime);
    }

    calculateTimes(proc, n);
    printResults(proc, n);

    return 0;
}
