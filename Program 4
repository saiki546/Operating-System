#include <stdio.h>

struct Process {
    int pid;         
    int arrivalTime;  
    int burstTime;    
    int waitingTime;  
    int turnaroundTime; 
    int completed;    
};


int findNextProcess(struct Process proc[], int n, int currentTime) {
    int minBurst = __INT_MAX__;
    int nextProcess = -1;
    for (int i = 0; i < n; i++) {
        if (!proc[i].completed && proc[i].arrivalTime <= currentTime) {
            if (proc[i].burstTime < minBurst) {
                minBurst = proc[i].burstTime;
                nextProcess = i;
            }
        }
    }
    return nextProcess;
}


void calculateTimes(struct Process proc[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int i = findNextProcess(proc, n, currentTime);
        if (i == -1) {
            currentTime++;
            continue;
        }

        proc[i].waitingTime = currentTime - proc[i].arrivalTime;
        proc[i].turnaroundTime = proc[i].waitingTime + proc[i].burstTime;
        currentTime += proc[i].burstTime;
        proc[i].completed = 1;
        completedProcesses++;
    }
}


void calculateAverageTimes(struct Process proc[], int n, float *avgWaitingTime, float *avgTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += proc[i].waitingTime;
        totalTurnaroundTime += proc[i].turnaroundTime;
    }
    *avgWaitingTime = (float)totalWaitingTime / n;
   
