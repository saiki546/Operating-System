#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

#define SHM_SIZE 1024 


struct shared_data {
    int number;
    char message[100];
};

int main() {
    int shmid;
    key_t key;
    struct shared_data *shared_memory;
    char *message = "Hello, shared memory!";

    key = ftok(".", 'a');

    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    shared_memory = (struct shared_data *) shmat(shmid, NULL, 0);
    if (shared_memory == (struct shared_data *) -1) {
        perror("shmat");
        exit(1);
    }


    shared_memory->number = 42;
    strncpy(shared_memory->message, message, sizeof(shared_memory->message));
    shared_memory->message[sizeof(shared_memory->message) - 1] = '\0'; // Ensure null-termination

    printf("Data written to shared memory: number = %d, message = %s\n", shared_memory->number, shared_memory->message);

    if (shmdt(shared_memory) == -1) {
        perror("shmdt");
        exit(1);
    }

    pid_t pid = fork();

    if (pid == 0) {
       
        struct shared_data *child_memory;

      
        child_memory = (struct shared_data *) shmat(shmid, NULL, 0);
        if (child_memory == (struct shared_data *) -1) {
            perror("shmat in child");
            exit(1);
        }

        printf("Child process reads from shared memory: number = %d, message = %s\n", child_memory->number, child_memory->message);

        if (shmdt(child_memory) == -1) {
            perror("shmdt in child");
            exit(1);
        }

        exit(0);
    } else if (pid > 0) {
  
        wait(NULL);
    } else {
        perror("fork");
        exit(1);
    }


    if (shmctl(shmid, IPC_RMID, NULL) == -1) {
        perror("shmctl");
        exit(1);
    }

    return 0;
}
