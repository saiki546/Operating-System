#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void worstFit(int blockSize[], int blocks, int processSize[], int processes) {
    // Store the block allocation for each process
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processes; i++) {
        allocation[i] = -1; // Initialize allocations to -1 (not allocated)
    }

    // Pick each process and find a suitable block according to the worst fit
    for (int i = 0; i < processes; i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[worstIdx] < blockSize[j]) {
                    worstIdx = j;
                }
            }
        }

        // If a suitable block is found
        if (worstIdx != -1) {
            // Allocate the block j to process i
            allocation[i] = worstIdx;
            // Reduce available memory in this block
            blockSize[worstIdx] -= processSize[i];
        }
    }

    // Display allocation results
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
    int blocks, processes;

    // Input number of blocks and their sizes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &blocks);
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    // Input number of processes and their sizes
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    // Call worst fit function
    worstFit(blockSize, blocks, processSize, processes);

    return 0;
}
