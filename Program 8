#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;            // Process ID
    int arrivalTime;    // Arrival time
    int burstTime;      // Burst time
    int remainingTime;  // Remaining time
    int waitingTime;    // Waiting time
    int turnaroundTime; // Turnaround time
};

// Function to calculate waiting time and turnaround time
void calculateTimes(struct Process proc[], int n, int timeQuantum) {
    int currentTime = 0;
    int completedProcesses = 0;
    bool isProcessExecuted;

    while (completedProcesses < n) {
        isProcessExecuted = false;
        for (int i = 0; i < n; i++) {
            if (proc[i].remainingTime > 0 && proc[i].arrivalTime <= currentTime) {
                if (proc[i].remainingTime > timeQuantum) {
                    currentTime += timeQuantum;
                    proc[i].remainingTime -= timeQuantum;
                } else {
                    currentTime += proc[i].remainingTime;
                    proc[i].waitingTime = currentTime - proc[i].arrivalTime - proc[i].burstTime;
                    proc[i].turnaroundTime = currentTime - proc[i].arrivalTime;
                    proc[i].remainingTime = 0;
                    completedProcesses++;
                }
                isProcessExecuted = true;
            }
        }
        if (!isProcessExecuted) {
            currentTime++;
        }
    }
}

// Function to calculate average times
void calculateAverageTimes(struct Process proc[], int n, float *avgWaitingTime, float *avgTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += proc[i].waitingTime;
        totalTurnaroundTime += proc[i].turnaroundTime;
    }
    *avgWaitingTime = (float)totalWaitingTime / n;
    *avgTurnaroundTime = (float)totalTurnaroundTime / n;
}

int main() {
    int n, timeQuantum;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &proc[i].arrivalTime, &proc[i].burstTime);
        proc[i].remainingTime = proc[i].burstTime;
        proc[i].waitingTime = 0;
        proc[i].turnaroundTime = 0;
    }

    // Input time quantum
    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);

    // Calculate waiting time and turnaround time for each process
    calculateTimes(proc, n, timeQuantum);

    // Calculate average waiting time and average turnaround time
    float avgWaitingTime, avgTurnaroundTime;
    calculateAverageTimes(proc, n, &avgWaitingTime, &avgTurnaroundTime);

    // Output the process details
    printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].arrivalTime, proc[i].burstTime, proc[i].waitingTime, proc[i].turnaroundTime);
    }

    // Output the average times
    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    return 0;
}
