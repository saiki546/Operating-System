#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

// Shared resource
int shared_data = 0;

// Semaphores
sem_t rw_mutex;   // Semaphore for the resource
sem_t mutex;      // Semaphore for read_count access

// Read count
int read_count = 0;

// Reader function
void* reader(void* arg) {
    int reader_id = *(int*)arg;
    while (1) {
        // Entry section
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) {
            sem_wait(&rw_mutex); // First reader locks the resource
        }
        sem_post(&mutex);

        // Critical section
        printf("Reader %d: read shared data = %d\n", reader_id, shared_data);

        // Exit section
        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&rw_mutex); // Last reader unlocks the resource
        }
        sem_post(&mutex);

        // Sleep for a random time to simulate reading
        usleep(rand() % 1000);
    }
    pthread_exit(NULL);
}

// Writer function
void* writer(void* arg) {
    int writer_id = *(int*)arg;
    while (1) {
        // Entry section
        sem_wait(&rw_mutex); // Writer locks the resource

        // Critical section
        shared_data++;
        printf("Writer %d: wrote shared data = %d\n", writer_id, shared_data);

        // Exit section
        sem_post(&rw_mutex); // Writer unlocks the resource

        // Sleep for a random time to simulate writing
        usleep(rand() % 1000);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t readers[5], writers[2];
    int reader_ids[5], writer_ids[2];

    // Initialize semaphores
    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    // Create reader threads
    for (int i = 0; i < 5; i++) {
        reader_ids[i] = i + 1;
        if (pthread_create(&readers[i], NULL, reader, &reader_ids[i]) != 0) {
            perror("Failed to create reader thread");
            return 1;
        }
    }

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        writer_ids[i] = i + 1;
        if (pthread_create(&writers[i], NULL, writer, &writer_ids[i]) != 0) {
            perror("Failed to create writer thread");
            return 1;
        }
    }

    // Wait for all threads to finish (in this case, they won't, because of infinite loops)
    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}
