#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#define FILENAME "example.txt"
#define BUFFER_SIZE 1024

int main() {
    int fd;
    ssize_t bytes_written, bytes_read;
    char write_buffer[] = "Hello, this is a test for UNIX system calls!\n";
    char read_buffer[BUFFER_SIZE];

    // Create and open a file for writing (O_CREAT | O_WRONLY | O_TRUNC)
    fd = open(FILENAME, O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("Error opening file for writing");
        exit(EXIT_FAILURE);
    }

    // Write to the file
    bytes_written = write(fd, write_buffer, strlen(write_buffer));
    if (bytes_written == -1) {
        perror("Error writing to file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("Written %zd bytes to the file.\n", bytes_written);

    // Close the file after writing
    if (close(fd) == -1) {
        perror("Error closing file after writing");
        exit(EXIT_FAILURE);
    }

    // Open the file for reading (O_RDONLY)
    fd = open(FILENAME, O_RDONLY);
    if (fd == -1) {
        perror("Error opening file for reading");
        exit(EXIT_FAILURE);
    }

    // Read from the file
    bytes_read = read(fd, read_buffer, BUFFER_SIZE - 1);
    if (bytes_read == -1) {
        perror("Error reading from file");
        close(fd);
        exit(EXIT_FAILURE);
    }

    // Null-terminate the buffer to print it as a string
    read_buffer[bytes_read] = '\0';
    printf("Read %zd bytes from the file:\n%s", bytes_read, read_buffer);

    // Close the file after reading
    if (close(fd) == -1) {
        perror("Error closing file after reading");
        exit(EXIT_FAILURE);
    }

    // Re-open the file for both reading and writing
    fd = open(FILENAME, O_RDWR);
    if (fd == -1) {
        perror("Error opening file for reading and writing");
        exit(EXIT_FAILURE);
    }

    // Move the file offset to the beginning
    if (lseek(fd, 0, SEEK_SET) == -1) {
        perror("Error seeking in file");
        close(fd);
        exit(EXIT_FAILURE);
    }

    // Write additional data to the file
    char additional_data[] = "Adding more data to the file.\n";
    bytes_written = write(fd, additional_data, strlen(additional_data));
    if (bytes_written == -1) {
        perror("Error writing additional data to file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("Written additional %zd bytes to the file.\n", bytes_written);

    // Close the file
    if (close(fd) == -1) {
        perror("Error closing file after writing additional data");
        exit(EXIT_FAILURE);
    }

    return 0;
}
